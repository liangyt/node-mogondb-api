#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-mogondb-api:server');
var fs = require('fs');
var http = require('http');

var https = require('https');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP/HTTPS server.
 */


//=======================http============
// 这种是使用 http 方式创建的服务
var server = http.createServer(app);
//=======================http============

// webSocket 使用ws轮子尝试了下webSocket,实现接收和发送功能
// https://github.com/websockets/ws
const webSocket = require('ws');
const wsService = require('../service/ws/index');
const wss = new webSocket.Server({server});
wss.on('connection', wsService.connection)
wsService.setWss(wss)

//=======================https============
// 这种是使用 https 方式创建的服务 需要根据 key/key-create.txt 所说的方法选择生成对应的文件。但仅限于自已测试
// var server = https.createServer({
//                 key: fs.readFileSync(__dirname + '/key/privatekey.pem'),
//                 cert: fs.readFileSync(__dirname + '/key/certificate.pem')
//               }, app);
//=======================https============

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
